%section.section.manage
  %h1.section-title BrickHack Dashboard
  .container
    #chart
  .container.container-half
    %h3 Today's Stats
    - today = Time.now.beginning_of_day
    %ul
      %li
        %strong New Applications:
        = total_count = Questionnaire.where("created_at >= :today", today: today).count
      %li
        %strong RIT Applications:
        - rit_count = Questionnaire.where("school_id = \"2304\" AND created_at >= :today OR school_id = \"5535\" AND created_at >= :today", today: today).count
        = rit_count
        = "(#{100 * rit_count/total_count}%)" unless total_count == 0
      %li
        %strong Resumes:
        = resume_count = Questionnaire.where("resume_file_name != '' AND created_at >= :today", today: today).count
        = "(#{100 * resume_count/total_count}%)" unless total_count == 0
    %h3 Acceptance Stats
    %ul
      %li
        %strong
          %span.acc-status-accepted Accepted:
        = Questionnaire.where(acc_status: "accepted").count
      %li
        %strong
          %span.acc-status-accepted Accepted:
        = Questionnaire.where("acc_status = \"accepted\" AND school_id = \"2304\" OR acc_status = \"accepted\" AND school_id = \"5535\"").count
      %li
        %strong
          %span.acc-status-waitlist Waitlisted:
        = Questionnaire.where(acc_status: "waitlist").count
      %li
        %strong
          %span.acc-status-denied Denied:
        = Questionnaire.where(acc_status: "denied").count
      %li
        %strong
          %span.acc-status-pending Pending:
        = Questionnaire.where(acc_status: "pending").count
      %li
        %strong
          %span.acc-status-late_waitlist Late Waitlisted:
        = Questionnaire.where(acc_status: "late_waitlist").count
    %h3 Total Stats
    %ul
      %li
        %strong Applications:
        = total_count = Questionnaire.count
      %li
        %strong RIT Applications:
        - rit_count = Questionnaire.where("school_id = \"2304\" OR school_id = \"5535\"").count
        = rit_count
        = "(#{100 * rit_count/total_count}%)" unless total_count == 0
      %li
        %strong Resumes:
        = resume_count = Questionnaire.where("resume_file_name != ''").count
        = "(#{100 * resume_count/total_count}%)" unless total_count == 0
      %li
        %strong Registered Users:
        = User.where(admin: false).count
        (non-admin)
  .container.container-half
    %h3 Schools
    %small Application Count - Name
    %ul
      - School.where("questionnaire_count >= 1").select([:name, :questionnaire_count]).order("questionnaire_count DESC").each do |school|
        %li= "#{school.questionnaire_count} - #{school.name}"

%script{src: "/assets/d3.v3.min.js"}
%script{src: "/assets/queue.v1.min.js"}
%script{src: "/assets/topojson.v1.min.js"}
:javascript
  var width = 950,
  height = 600;

  var appsById = d3.map();

  var formatNumber = d3.format(",.0f");

  var path = d3.geo.path()
      .projection(null);

  var radius = d3.scale.sqrt()
      .domain([0, 50])
      .range([0, 25]);

  var svg = d3.select("#chart").append("svg:svg")
      .attr("width", width)
      .attr("height", height);

  queue()
      .defer(d3.json, "/us.json")
      .defer(d3.tsv, "/manage/dashboard/map_data.tsv", function(d) { appsById.set(d.id, +d.apps); })
      .await(ready);

  function ready(error, us) {
    if (error) return console.error(error);

    svg.append("path")
        .datum(topojson.feature(us, us.objects.nation))
        .attr("class", "land")
        .attr("d", path);

    svg.append("path")
        .datum(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; }))
        .attr("class", "border border--state")
        .attr("d", path);

    svg.append("g")
        .attr("class", "bubble")
      .selectAll("circle")
        .data(topojson.feature(us, us.objects.counties).features
          .sort(function(a, b) { return (appsById.get(b.id) || 0) - (appsById.get(a.id) || 0); }))
      .enter().append("circle")
        .attr("transform", function(d) { return "translate(" + path.centroid(d) + ")"; })
        .attr("r", function(d) { return radius(appsById.get(d.id) || 0); })
      .append("title")
        .text(function(d) {
          return d.properties.name
              + "\nApplications: " + formatNumber(appsById.get(d.id) || 0);
        });
  };

  d3.select(self.frameElement).style("height", height + "px");
